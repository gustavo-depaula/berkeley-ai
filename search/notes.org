#+TITLE: Notes

* Question 1 (3 points): Finding a Fixed Food Dot using Depth First Search
My solution includes first some helper functions, which abstract some of the
implementation details specific to this problem. Then, I create the fringe as a
stack. The contents of the stack will be lists of tuples. These tuples are the
shape of the successors returned by `problem.getSuccessors`. Each list (item on
the stack) represents a possible candidate path.

e.g. successful path of the medium sized maze
#+begin_quote
[((34, 16), 'None', 1), ((33, 16), 'West', 1), ((32, 16), 'West', 1), ((31, 16), 'West', 1), ((30, 16), 'West', 1), ((29, 16), 'West', 1), ((28, 16), 'West', 1), ((27, 16), 'West', 1), ((26, 16), 'West', 1), ((25, 16), 'West', 1), ((24, 16), 'West', 1), ((23, 16), 'West', 1), ((22, 16), 'West', 1), ((21, 16), 'West', 1), ((20, 16), 'West', 1), ((19, 16), 'West', 1), ((18, 16), 'West', 1), ((17, 16), 'West', 1), ((16, 16), 'West', 1), ((15, 16), 'West', 1), ((14, 16), 'West', 1), ((13, 16), 'West', 1), ((12, 16), 'West', 1), ((11, 16), 'West', 1), ((10, 16), 'West', 1), ((9, 16), 'West', 1), ((8, 16), 'West', 1), ((7, 16), 'West', 1), ((6, 16), 'West', 1), ((5, 16), 'West', 1), ((4, 16), 'West', 1), ((3, 16), 'West', 1), ((2, 16), 'West', 1), ((1, 16), 'West', 1), ((1, 15), 'South', 1), ((1, 14), 'South', 1), ((1, 13), 'South', 1), ((1, 12), 'South', 1), ((1, 11), 'South', 1), ((1, 10), 'South', 1), ((1, 9), 'South', 1), ((1, 8), 'South', 1), ((1, 7), 'South', 1), ((2, 7), 'East', 1), ((3, 7), 'East', 1), ((4, 7), 'East', 1), ((4, 8), 'North', 1), ((4, 9), 'North', 1), ((4, 10), 'North', 1), ((4, 11), 'North', 1), ((4, 12), 'North', 1), ((4, 13), 'North', 1), ((4, 14), 'North', 1), ((5, 14), 'East', 1), ((6, 14), 'East', 1), ((6, 13), 'South', 1), ((6, 12), 'South', 1), ((6, 11), 'South', 1), ((6, 10), 'South', 1), ((6, 9), 'South', 1), ((6, 8), 'South', 1), ((7, 8), 'East', 1), ((8, 8), 'East', 1), ((8, 9), 'North', 1), ((8, 10), 'North', 1), ((8, 11), 'North', 1), ((8, 12), 'North', 1), ((8, 13), 'North', 1), ((8, 14), 'North', 1), ((9, 14), 'East', 1), ((10, 14), 'East', 1), ((10, 13), 'South', 1), ((10, 12), 'South', 1), ((10, 11), 'South', 1), ((10, 10), 'South', 1), ((11, 10), 'East', 1), ((12, 10), 'East', 1), ((12, 11), 'North', 1), ((12, 12), 'North', 1), ((13, 12), 'East', 1), ((14, 12), 'East', 1), ((15, 12), 'East', 1), ((16, 12), 'East', 1), ((17, 12), 'East', 1), ((18, 12), 'East', 1), ((19, 12), 'East', 1), ((20, 12), 'East', 1), ((20, 11), 'South', 1), ((20, 10), 'South', 1), ((20, 9), 'South', 1), ((21, 9), 'East', 1), ((22, 9), 'East', 1), ((23, 9), 'East', 1), ((24, 9), 'East', 1), ((25, 9), 'East', 1), ((26, 9), 'East', 1), ((27, 9), 'East', 1), ((27, 8), 'South', 1), ((27, 7), 'South', 1), ((27, 6), 'South', 1), ((27, 5), 'South', 1), ((27, 4), 'South', 1), ((27, 3), 'South', 1), ((27, 2), 'South', 1), ((26, 2), 'West', 1), ((25, 2), 'West', 1), ((24, 2), 'West', 1), ((23, 2), 'West', 1), ((22, 2), 'West', 1), ((21, 2), 'West', 1), ((20, 2), 'West', 1), ((19, 2), 'West', 1), ((18, 2), 'West', 1), ((17, 2), 'West', 1), ((16, 2), 'West', 1), ((15, 2), 'West', 1), ((14, 2), 'West', 1), ((13, 2), 'West', 1), ((12, 2), 'West', 1), ((11, 2), 'West', 1), ((10, 2), 'West', 1), ((10, 1), 'South', 1), ((9, 1), 'West', 1), ((8, 1), 'West', 1), ((7, 1), 'West', 1), ((6, 1), 'West', 1), ((5, 1), 'West', 1), ((4, 1), 'West', 1), ((3, 1), 'West', 1), ((2, 1), 'West', 1), ((1, 1), 'West', 1)]
#+end_quote

#+begin_quote
Is the exploration order what you would have expected?
#+end_quote

Yes, it always explore the left-most paths first.

#+begin_quote
Does Pacman actually go to all the explored squares on his way to the goal?
#+end_quote

No, because only the success path is returned. An addition may be added to the
algorithm so the Pacman visits every visited node. The only thing you gotta do
is push the movement to go to the visited node and if it fails, you push the
reverse movement so it goes back.

#+begin_quote
Hint: If you use a Stack as your data structure, the solution found by your DFS algorithm for mediumMaze should have a length of 130 (provided you push successors onto the fringe in the order provided by getSuccessors; you might get 246 if you push them in the reverse order). Is this a least cost solution? If not, think about what depth-first search is doing wrong.
#+end_quote

DFS always return the left-most solution, not the optimal solution, that's what
it's "doing wrong" (not getting the most optimal path).

* Question 2 (3 points): Breadth First Search
The only change we have to do to the algorithm from question 1 is to change the
data structure that the fringe uses. Therefore, the solution was to just extract
the search algorithm made in question 1 and parametrize the fringe's data
structure. DFS uses a Stack and BFS uses a Queue.

#+begin_quote
Does BFS find a least cost solution?
#+end_quote

(I think this questions asks if *my* implementation of BFS finds a least cost
solution. It does, but I think it's nice to add why BFS finds a LCS).

Yes. A least cost solution in a graph where every edge has cost = 1 is, by
definition, the solution with least amount of levels between the starting and
destination nodes. As BFS searchs level-by-level, it's capable of finding the
path with the least amount of levels in-between, which is a least-cost-solution.

#+begin_quote
Note: If you've written your search code generically, your code should work equally well for the eight-puzzle search problem without any changes.
#+end_quote

It does!

* Question 3 (3 points): Varying the Cost Function
Continued using the same generic problem search function used in questions 1
and 2. In this one, I created a class that inherited from
`PriorityQueueWithFunction` to define a priority function that extracted the
edge's cost from the candidates on the fringe.

One thing I was doing wrong and the (fantastic) autograder caught, is that, the
cost to be input on the priority queue, needs to be the entire backwards cost to
reach that node, and not just from the previous node.

#+begin_quote
You should now observe successful behavior in all three of the following layouts, where the agents below are all UCS agents that differ only in the cost function they use (the agents and cost functions are written for you):
#+end_quote

Yep.

#+begin_quote
Note: You should get very low and very high path costs for the StayEastSearchAgent and StayWestSearchAgent respectively, due to their exponential cost functions (see searchAgents.py for details).
#+end_quote

Got it.

* Question 4 (3 points): A* search
Really similar to the solution for question 3. But now, the priority function
uses both backward cost (used by UCS) and forward cost (used by greedy,
generated by heuristics).

After watching the [[https://www.youtube.com/watch?v=Mlwrx7hbKPs&list=PLsOUugYMBBJENfZ3XAToMsg44W7LeUVhF&index=3][third class]], I've changed the implementation of
`visitedNodes` to use set instead of list.

#+begin_quote
You should see that A* finds the optimal solution slightly faster than uniform cost search (about 549 vs. 620 search nodes expanded in our implementation, but ties in priority may make your numbers differ slightly).
#+end_quote

Before fixing the error I wrote about in the previous question, I was getting
lower search nodes count. After the fix, I'm getting everything right.

#+begin_quote
What happens on openMaze for the various search strategies?
#+end_quote

- DFS is the only one that doesn't find the optimal solution.
- BFS and UCS explore the same amount of nodes.
- A* finds the optimal solution but with fewer search nodes expanded.

* Question 5 (3 points): Finding All the Corners
This has been the trickiest one of all, until now. Finding the right modeling
was hard. At first, I tried a state representation where the whole path was in
the state, and it checked if the corners were in this long list of tuples. It
expanded nodes like crazy and could never solve 4 corners in a good time. For 3
corners, it expanded 44k+ nodes in the tiny map (!).

The modelling that worked was just storing the corners which it had already
found. So the state is modelled as (currentPosition, tupleOfVisitedCorners).
This worked and it could find the solution for the medium map with ~2.4K
expanded nodes.

The final optimization was normalizing the visited corners position in the
state, so the order in which it had visited states didn't matter. After that, it
works as expected, with just under 2k expanded nodes.

* Question 6 (3 points): Corners Problem: Heuristic
The first heuristic I came up with was to just return the closest corner's
manhattan distance. It worked! It's admissible and consistent. But it expanded
more than 1200 nodes.

The second was to return the sum of all corners' manhattan distances. But it's a
inadmissable and inconsistent, because it's pessimistic. Upon reaching one
corner, the path to another might be really small.

The third was a mixture of the other two, return the closest corner distance,
and the distance from it and the closest corner to the closest corner. This is
admissible and consistent, and the number of expanded nodes was ~900.

The final is an improvement on the last one. Keep getting the closest corner
to the closest corner until you reach all corners. Sum all of these distances
and return it. It's admissible, consistent, and dropped the number to just
under 700.

The trade-off of the final heuristic is that it's more expensive to calculate.

* Question 7 (4 points): Eating All The Dots
My first try was to use the same heuristic I used in question 6. So I
generalized the approach I used there into a separate function called
`orderGoalsByDistance`. It works pretty well, it expands 7250 nodes in
trickySearch.

To further improve it, to pass the 7k threshold, I added a parameter to it to
use mazeDistance (real distance) to improve the distance calculation to the
estimated closest food. With this approach, it only expands 4655 nodes.
* Question 8 (3 points): Suboptimal Search
The simplest solution I could find was to:
- in `isGoalState`, just look if the pacman's position contains a food
- use a `ucs` search in `findPathToClosestDot`

A small example where repeatedly going to the closest dot does not result in
finding the shortest path for eating all the dots (P is pacman, * is food):
#+begin_src
_____________________
|..*.......*.P*...*.|
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
#+end_src
Going to the closest dot would result in Pacman zig-zagging, instead of just
going all forward and backwards once.
